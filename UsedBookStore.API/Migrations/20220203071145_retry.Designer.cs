// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UsedBookStore.API.Data;

#nullable disable

namespace UsedBookStore.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220203071145_retry")]
    partial class retry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int>("FormatID")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShoppingCartEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("FormatID");

                    b.HasIndex("GenreId");

                    b.HasIndex("ShoppingCartEntityId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.ConditionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.FormatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.ShoppingCartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.BookEntity", b =>
                {
                    b.HasOne("UsedBookStore.API.Models.Entities.ConditionEntity", "Condition")
                        .WithMany("Books")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UsedBookStore.API.Models.Entities.FormatEntity", "Format")
                        .WithMany("Books")
                        .HasForeignKey("FormatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UsedBookStore.API.Models.Entities.GenreEntity", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UsedBookStore.API.Models.Entities.ShoppingCartEntity", null)
                        .WithMany("Books")
                        .HasForeignKey("ShoppingCartEntityId");

                    b.Navigation("Condition");

                    b.Navigation("Format");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.ConditionEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.FormatEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.GenreEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("UsedBookStore.API.Models.Entities.ShoppingCartEntity", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
